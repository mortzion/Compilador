/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import parser.SintaxError;
import cup.parser;
import cup.sym;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import static java.lang.System.exit;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import jflex.AnalisadorLexicoLALG;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import jflex.CustomScanner;
import jflex.Token;
import parser.Sintatico;

/**
 *
 * @author YiazmaT
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    private CustomDocumentFilter cdf;
    private ArrayList<Token> tokensIgnorados;

    public Main() {
        initComponents();
        cdf = new CustomDocumentFilter();
        TextLineNumber tln = new TextLineNumber(fonteBox);
        jScrollPane3.setRowHeaderView(tln);
        this.tokensIgnorados = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tokenTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        fonteBox = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tokenTable.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        tokenTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tokenTable);

        jLabel1.setText("Tokens:");

        jLabel2.setText("Fonte:");

        fonteBox.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        fonteBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fonteBoxKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fonteBoxKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(fonteBox);

        jMenu1.setText("File");

        jMenuItem2.setText("Carregar Fonte");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Analisador");

        jMenuItem1.setText("LÃ©xico");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem3.setText("Sintatico");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 816, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JFileChooser abrir = new JFileChooser();
        abrir.setFileFilter(new FileFilterTXT());
        int opcao;
        opcao = abrir.showOpenDialog(null);
        if (opcao == JFileChooser.APPROVE_OPTION) {
            File f = abrir.getSelectedFile();
            try {
                Scanner s = new Scanner(f);
                String line = "";
                while (s.hasNext()) {
                    line += s.nextLine() + System.lineSeparator();
                }
                fonteBox.setText(line);
            } catch (FileNotFoundException ex) {
                exit(1);
            }
            cdf.updateTextStyles();
            fonteBox.repaint();
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.reloadTable(0);
        this.fillTokenTable(this.getAllTokens());
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void fonteBoxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fonteBoxKeyTyped

    }//GEN-LAST:event_fonteBoxKeyTyped

    private void fonteBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fonteBoxKeyReleased
        cdf.updateTextStyles();
        fonteBox.repaint();
    }//GEN-LAST:event_fonteBoxKeyReleased

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        ArrayList<Token> tokens = new ArrayList<>();
        ArrayList<SintaxError> erros = new ArrayList<>();
        reloadTable(1);
        Sintatico s = new Sintatico(new CustomScanner((new StringReader(fonteBox.getText())), tokens),erros);
        try {
            System.out.println(s.start());
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        reloadTable(1);
        fillSintaxErrorTable(erros);
        tokensIgnorados = s.getTokenIgnorados();
        cdf.updateTextStyles();
        repaint();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    public void reloadTable(int type) {
        switch (type) {
            case 0: {
                DefaultTableModel model = new DefaultTableModel(0, 5);
                String[] header = new String[5];
                header[0] = "Lexema";
                header[1] = "Tipo";
                header[2] = "Linha";
                header[3] = "Coluna Inicial";
                header[4] = "Coluna Final";
                model.setColumnIdentifiers(header);
                tokenTable.setModel(model);
                tokenTable.revalidate();
                tokenTable.repaint();
                break;
            }
            case 1: {
                DefaultTableModel model = new DefaultTableModel(0, 3);
                String[] header = new String[3];
                header[0] = "Erro";
                header[1] = "Linha";
                header[2] = "Coluna";
                model.setColumnIdentifiers(header);
                tokenTable.setModel(model);
                tokenTable.revalidate();
                tokenTable.repaint();
                break;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    public void fillSintaxErrorTable(ArrayList<SintaxError> errors) {
        DefaultTableModel dtm = (DefaultTableModel) tokenTable.getModel();
        dtm.getDataVector().removeAllElements();
        dtm.fireTableDataChanged();

        String[] linha = new String[5];
        for (SintaxError e : errors) {
            linha[2] = String.valueOf(e.getLinha());
            linha[1] = String.valueOf(e.getColuna());
            linha[0] = e.getErro();
            dtm.addRow(linha);
        }
    }

    public void fillTokenTable(ArrayList<Token> tokens) {
        DefaultTableModel dtm = (DefaultTableModel) tokenTable.getModel();
        dtm.getDataVector().removeAllElements();
        dtm.fireTableDataChanged();

        String[] linha = new String[5];
        for (Token t : tokens) {
            linha[0] = t.getLexema();
            linha[1] = t.getTokenName();
            linha[2] = String.valueOf(t.getLinha());
            linha[3] = String.valueOf(t.getColunaInicio());
            linha[4] = String.valueOf(t.getColunaFinal());
            dtm.addRow(linha);
        }
    }

    public ArrayList<Token> getAllTokens() {
        ArrayList<Token> tokens = new ArrayList<Token>();

        AnalisadorLexicoLALG a = new AnalisadorLexicoLALG(new StringReader(fonteBox.getText()));
        Token atual;
        try {
            while (true) {
                a.next_token();
                atual = a.yylex();
                if (atual.getTipo() == sym.EOF) {
                    break;
                } else {
                    tokens.add(atual);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        return tokens;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane fonteBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tokenTable;
    // End of variables declaration//GEN-END:variables

    private class CustomDocumentFilter extends DocumentFilter {

        private final StyledDocument styledDocument = fonteBox.getStyledDocument();
        private final StyleContext styleContext = StyleContext.getDefaultStyleContext();
        private final AttributeSet blueAttributeSet = styleContext.addAttribute(styleContext.getEmptySet(), StyleConstants.Foreground, Color.BLUE);
        private final AttributeSet blackAttributeSet = styleContext.addAttribute(styleContext.getEmptySet(), StyleConstants.Foreground, Color.BLACK);
        private final AttributeSet greenAttributeSet = styleContext.addAttribute(styleContext.getEmptySet(), StyleConstants.Foreground, new Color(0, 153, 0));
        private final AttributeSet redAttributeSet = styleContext.addAttribute(styleContext.getEmptySet(), StyleConstants.Foreground, Color.RED);
        private final AttributeSet pinkAttributeSet = styleContext.addAttribute(styleContext.getEmptySet(), StyleConstants.Foreground, new Color(255, 0, 255));
        private final AttributeSet grayAttributeSet = styleContext.addAttribute(styleContext.getEmptySet(), StyleConstants.Foreground, Color.gray);
        
        @Override
        public void insertString(FilterBypass fb, int offset, String text, AttributeSet attributeSet) throws BadLocationException {
            super.insertString(fb, offset, text, attributeSet);

            handleTextChanged();
        }

        @Override
        public void remove(FilterBypass fb, int offset, int length) throws BadLocationException {
            super.remove(fb, offset, length);

            handleTextChanged();
        }

        @Override
        public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attributeSet) throws BadLocationException {
            super.replace(fb, offset, length, text, attributeSet);

            handleTextChanged();
        }

        /**
         * Runs your updates later, not during the event notification.
         */
        private void handleTextChanged() {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    updateTextStyles();
                }
            });
        }

        private void updateTextStyles() {
            // Clear existing styles
            styledDocument.setCharacterAttributes(0, fonteBox.getText().length(), blackAttributeSet, true);
            AnalisadorLexicoLALG a = new AnalisadorLexicoLALG(new StringReader(fonteBox.getText()));
            a.tokensComentarios(true);
            Token t = null;

                System.out.println(tokenIgnorados.size());
            try {
                while (true) {
                    Symbol s = a.next_token();
                    t = a.yylex();
                    if (t.getTipo() == sym.EOF) {
                        break;
                    }
                    AttributeSet ts=blackAttributeSet;
                    if (t.getTipo() >= 0 && t.getTipo() <= 16) {
                        ts = blueAttributeSet;
                    } else if ((t.getTipo() >= 23 && t.getTipo() <= 34) || t.getTipo() == 38) {
                        ts = redAttributeSet;
                    } else if (t.getTipo() == 35 || t.getTipo() == 36) {
                        ts = pinkAttributeSet;
                    } else if (t.getTipo() == 37) {
                        ts = greenAttributeSet;
                    } else if (t.getTipo() == -3 || t.getTipo() == -4) {
                        ts= grayAttributeSet;
                    }
                    if(tokenIgnorados!=null && tokenIgnorados.contains(t)){
                        tokenIgnorados.remove(t);
                        ts = styleContext.addAttribute(ts, StyleConstants.Underline, true);
                    }
                    styledDocument.setCharacterAttributes(t.getOffset() - t.getLinha(), t.getLexema().length(),ts, false);
                }
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

}//end file
