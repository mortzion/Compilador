/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import parser.SintaxError;
import cup.parser;
import cup.sym;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import static java.lang.System.exit;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import jflex.AnalisadorLexicoLALG;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import jflex.CustomScanner;
import jflex.Token;
import parser.Sintatico;
import interpretador.IO;
import interpretador.Interpretador;
import javax.swing.JOptionPane;

/**
 *
 * @author YiazmaT
 */
public class Main extends javax.swing.JFrame implements IO {

    /**
     * Creates new form Main
     */
    private CustomDocumentFilter cdf;
    private ArrayList<Token> tokensIgnorados;
    private ArrayList<SintaxError> errors;
    private ArrayList<Token> tokens;
    private int size;

    public Main() {
        initComponents();
        cdf = new CustomDocumentFilter();
        TextLineNumber tln = new TextLineNumber(fonteBox);
        jScrollPane3.setRowHeaderView(tln);
        this.tokensIgnorados = null;
        tokensIgnorados = new ArrayList<>();
        errors = new ArrayList<>();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        fonteBox = new javax.swing.JTextPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Fonte:");

        fonteBox.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        fonteBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fonteBoxKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fonteBoxKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(fonteBox);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lexema", "Tipo", "Linha", "Coluna Inicial", "Coluna Final"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 849, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Tokens", jPanel1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Erro", "Linha", "Coluna"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 849, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Erros", jPanel2);

        jTextPane1.setEditable(false);
        jScrollPane4.setViewportView(jTextPane1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 849, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Código de Máquina", jPanel4);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane5.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 849, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Saida", jPanel3);

        jMenu1.setText("File");

        jMenuItem2.setText("Carregar Fonte");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Analisador");

        jMenuItem1.setText("Léxico");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem3.setText("Sintatico");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Compilar e Rodar");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Interpretador");

        jMenuItem5.setText("Abrir Interpretador");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel2)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JFileChooser abrir = new JFileChooser();
        abrir.setFileFilter(new FileFilterTXT());
        int opcao;
        opcao = abrir.showOpenDialog(null);
        if (opcao == JFileChooser.APPROVE_OPTION) {
            File f = abrir.getSelectedFile();
            try {
                Scanner s = new Scanner(f);
                String line = "";
                while (s.hasNext()) {
                    line += s.nextLine() + System.lineSeparator();
                }
                fonteBox.setText(line);
            } catch (FileNotFoundException ex) {
                exit(1);
            }
            cdf.updateTextStyles();
            fonteBox.repaint();
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.fillTokenTable(this.getAllTokens());
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void fonteBoxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fonteBoxKeyTyped

    }//GEN-LAST:event_fonteBoxKeyTyped

    private void fonteBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fonteBoxKeyReleased
        int newfontSize = fonteBox.getText().length();
        if (size != newfontSize) {
            cdf.tokensIgnorados = null;
            size = newfontSize;
        }
        cdf.updateTextStyles();
        fonteBox.repaint();
    }//GEN-LAST:event_fonteBoxKeyReleased

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        tokens = new ArrayList<>();
        errors = new ArrayList<>();
        Sintatico s = new Sintatico(new CustomScanner((new StringReader(fonteBox.getText())), tokens), errors);
        try {
            System.out.println(s.start());
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        fillTokenTable(tokens);
        fillSintaxErrorTable(errors);
        jTextPane1.setText(s.getCodigoMaquina().toString());
        cdf.tokensIgnorados = s.getTokenIgnorados();
        cdf.updateTextStyles();
        if (errors.isEmpty()) {
            jTabbedPane1.setSelectedIndex(2);
            jTextPane1.setText(s.getCodigoMaquina().toString());
        }else{
            jTabbedPane1.setSelectedIndex(1);
        }
        repaint();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        tokens = new ArrayList<>();
        errors = new ArrayList<>();
        Sintatico s = new Sintatico(new CustomScanner((new StringReader(fonteBox.getText())), tokens), errors);
        try {
            System.out.println(s.start());
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        fillTokenTable(tokens);
        fillSintaxErrorTable(errors);
        jTextPane1.setText(s.getCodigoMaquina().toString());
        cdf.tokensIgnorados = s.getTokenIgnorados();
        cdf.updateTextStyles();
        if (errors.isEmpty()) {
            jTabbedPane1.setSelectedIndex(3);
            jTextPane1.setText(s.getCodigoMaquina().toString());
            jTextArea1.setText("");
            Interpretador interpretador = new Interpretador(s.getCodigoMaquina().getInstrucoes(), this);
            interpretador.run();
        }else{
            jTabbedPane1.setSelectedIndex(1);
        }
        repaint();
        
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        GUI.Interpretador it = new GUI.Interpretador();
        it.setVisible(true);
        it.toFront();
        it.setLocation(this.getLocation());
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    public void fillSintaxErrorTable(ArrayList<SintaxError> errors) {
        DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
        dtm.getDataVector().removeAllElements();
        dtm.fireTableDataChanged();

        String[] linha = new String[5];
        for (SintaxError e : errors) {
            linha[2] = String.valueOf(e.getColuna());
            linha[1] = String.valueOf(e.getLinha());
            linha[0] = e.getErro();
            dtm.addRow(linha);
        }
        jTable2.revalidate();
        jTable2.repaint();
    }

    public void fillTokenTable(ArrayList<Token> tokens) {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.getDataVector().removeAllElements();
        dtm.fireTableDataChanged();

        String[] linha = new String[5];
        for (Token t : tokens) {
            linha[0] = t.getLexema();
            linha[1] = t.getTokenName();
            linha[2] = String.valueOf(t.getLinha());
            linha[3] = String.valueOf(t.getColunaInicio());
            linha[4] = String.valueOf(t.getColunaFinal());
            dtm.addRow(linha);
        }
        jTable1.revalidate();
        jTable1.repaint();
    }

    public ArrayList<Token> getAllTokens() {
        tokens = new ArrayList<>();

        AnalisadorLexicoLALG a = new AnalisadorLexicoLALG(new StringReader(fonteBox.getText()));
        Token atual;
        try {
            while (true) {
                a.next_token();
                atual = a.yylex();
                if (atual.getTipo() == sym.EOF) {
                    break;
                } else {
                    tokens.add(atual);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        return tokens;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane fonteBox;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    private class CustomDocumentFilter extends DocumentFilter {

        private final StyledDocument styledDocument = fonteBox.getStyledDocument();
        private final StyleContext styleContext = StyleContext.getDefaultStyleContext();
        private ArrayList<Token> tokensIgnorados;
        private final AttributeSet blueAttributeSet = styleContext.addAttribute(styleContext.getEmptySet(), StyleConstants.Foreground, Color.BLUE);
        private final AttributeSet blackAttributeSet = styleContext.addAttribute(styleContext.getEmptySet(), StyleConstants.Foreground, Color.BLACK);
        private final AttributeSet greenAttributeSet = styleContext.addAttribute(styleContext.getEmptySet(), StyleConstants.Foreground, new Color(0, 153, 0));
        private final AttributeSet redAttributeSet = styleContext.addAttribute(styleContext.getEmptySet(), StyleConstants.Foreground, Color.RED);
        private final AttributeSet pinkAttributeSet = styleContext.addAttribute(styleContext.getEmptySet(), StyleConstants.Foreground, new Color(255, 0, 255));
        private final AttributeSet grayAttributeSet = styleContext.addAttribute(styleContext.getEmptySet(), StyleConstants.Foreground, Color.gray);

        @Override
        public void insertString(FilterBypass fb, int offset, String text, AttributeSet attributeSet) throws BadLocationException {
            super.insertString(fb, offset, text, attributeSet);

            handleTextChanged();
        }

        @Override
        public void remove(FilterBypass fb, int offset, int length) throws BadLocationException {
            super.remove(fb, offset, length);

            handleTextChanged();
        }

        @Override
        public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attributeSet) throws BadLocationException {
            super.replace(fb, offset, length, text, attributeSet);

            handleTextChanged();
        }

        /**
         * Runs your updates later, not during the event notification.
         */
        private void handleTextChanged() {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    updateTextStyles();
                }
            });
        }

        private void updateTextStyles() {
            // Clear existing styles
            styledDocument.setCharacterAttributes(0, fonteBox.getText().length(), blackAttributeSet, true);
            AnalisadorLexicoLALG a = new AnalisadorLexicoLALG(new StringReader(fonteBox.getText()));
            a.tokensComentarios(true);
            Token t = null;
            ArrayList<Token> copiaTokens = (tokensIgnorados != null ? (ArrayList<Token>) tokensIgnorados.clone() : null);
            try {
                while (true) {
                    Symbol s = a.next_token();
                    t = a.yylex();
                    if (t.getTipo() == sym.EOF) {
                        break;
                    }
                    AttributeSet ts = blackAttributeSet;
                    if (t.getTipo() >= 2 && t.getTipo() <= 15) {
                        ts = blueAttributeSet;
                    } else if ((t.getTipo() >= 22 && t.getTipo() <= 34)) {
                        ts = redAttributeSet;
                    } else if (t.getTipo() == 35 || t.getTipo() == 36) {
                        ts = pinkAttributeSet;
                    } else if (t.getTipo() == 37) {
                        ts = greenAttributeSet;
                    } else if (t.getTipo() >= 40 && t.getTipo() <= 42) {
                        ts = grayAttributeSet;
                    }
                    if (tokensIgnorados != null && tokensIgnorados.contains(t)) {
                        tokensIgnorados.remove(t);
                        ts = styleContext.addAttribute(ts, StyleConstants.Underline, true);
                    }
                    styledDocument.setCharacterAttributes(t.getOffset() - t.getLinha(), t.getLexema().length(), ts, false);
                }

            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            tokensIgnorados = copiaTokens;
        }
    }

    @Override
    public int readInt() {
        String input = JOptionPane.showInputDialog(this, "Entre com um número inteiro", "0");
        try {
            int i = Integer.valueOf(input);
            jTextArea1.append("Input: " + i + "\n");
            return i;
        } catch (NumberFormatException n) {
            JOptionPane.showMessageDialog(this, "Formato do número está incorreto.", "Erro", JOptionPane.ERROR_MESSAGE);
            return readInt();
        }
    }

    @Override
    public void printInt(int i) {
        jTextArea1.append("Output: " + i + "\n");
    }

}//end file
